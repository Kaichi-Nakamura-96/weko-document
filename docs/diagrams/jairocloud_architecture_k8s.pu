@startuml

    !include <C4/C4_Container>
    !include <elastic/common>
    !include <elastic/elasticsearch/elasticsearch>
    !include <k8s/Common>
    !include <k8s/Context>
    !include <k8s/Simplified>
    !include <k8s/OSS/all>

    !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

    ' !define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
    !define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
    !include FONTAWESOME/users.puml

    !define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
    !include AWSPuml/AWSCommon.puml
    !include AWSPuml/Storage/SimpleStorageService.puml

    header Architecture
    footer 1 of 1
    title JAIRO Cloudアーキテクチャ図

    ' LAYOUT_LEFT_RIGHT()
    ' LAYOUT_WITH_LEGEND()

    Person(sysAdmin, "System Administrator", $sprite="users")
    Person(repoAdmin, "Repositry Administrator", $sprite="users")
    Person(guestUser, "Guest User", $sprite="users")

    SimpleStorageService(contentsStorage, "Contents", "S3 storage", "")
    SimpleStorageService(backupStorageforES, "Backup(elasticsearch)", "S3 storage", "")
    SimpleStorageService(backupStorageforPG, "Backup(postgresql)", "S3 storage", "")
    
    Cluster_Boundary(cluster, "Kubernetes Cluster") {
        Namespace_Boundary(ns_weko3, "weko3") {
            KubernetesSvc(svc_repo, "nginx x 762", "")
            KubernetesPod(pod_repo, "weko3 x 762", "")
        }

        Namespace_Boundary(ns_weko3es, "weko3es") {
            KubernetesSvc(svc_es, "elasticseach", "")
            KubernetesPod(pod_es, "elasticsearch pod x 13", "1")
        }
        
        Namespace_Boundary(ns_weko3pg, "weko3pg") {
            KubernetesSvc(svc_pgpool, "pgpool", "")
            KubernetesPod(pod_pgpool_0, "pgpool", "")
            KubernetesPod(pod_pgpool_1, "pgpool", "")
            KubernetesPod(pod_pgpool_2, "pgpool", "")
            
            KubernetesPod(pod_postgresql_0, "postgresql(master)", "")
            KubernetesPod(pod_postgresql_1, "postgresql(replica)", "")
            KubernetesPod(pod_postgresql_2, "postgresql(replica)", "")
        }
        
        Namespace_Boundary(ns_weko3ra, "weko3ra") {
            KubernetesSvc(svc_rabbitmq, "rabbitmq", "")
            KubernetesPod(pod_rabbitmq_0, "rabbitmq", "")
            KubernetesPod(pod_rabbitmq_1, "rabbitmq", "")
            KubernetesPod(pod_rabbitmq_2, "rabbitmq", "")
        }
        
        Namespace_Boundary(ns_weko3re, "weko3re") {
            KubernetesSvc(svc_sentinel, "sentinel", "")
            
            KubernetesPod(pod_redis_0, "redis(master)", "")
            KubernetesPod(pod_redis_1, "redis(slave)", "")
            KubernetesPod(pod_sentinel_0, "sentinel", "")
            KubernetesPod(pod_sentinel_1, "sentinel", "")
            KubernetesPod(pod_sentinel_2, "sentinel", "")
        }
        
        ' Namespace_Boundary(ns, "rclone") {}
        
        ' Namespace_Boundary(ns, "default") {}
        
        ' Namespace_Boundary(ns, "kube-node-lease") {}
        
        ' Namespace_Boundary(ns, "kube-public") {}
        
        ' Namespace_Boundary(ns, "kube-system") {}
        
        Namespace_Boundary(ns_logging, "logging") {
            KubernetesSvc(svc_logging_elasticsearch, "elasticsearch", "")
            KubernetesSvc(svc_logging_kibana, "kibana", "")
            KubernetesPod(pod_logging_elastic_0, "elasticsearch", "")
            KubernetesPod(pod_logging_elastic_1, "elasticsearch", "")
            KubernetesPod(pod_logging_elastic_2, "elasticsearch", "")
            KubernetesPod(pod_logging_kibana, "kibana", "")
            KubernetesPod(pod_logging_fluentd, "fluentd x 46", "")
        }
        
        ' Namespace_Boundary(ns, "maintenance") {}
        
        ' Namespace_Boundary(ns, "maintenance-pod") {}
        
        Namespace_Boundary(ns_monitoring, "monitoring") {
            KubernetesSvc(svc_monitoring_prometheus, "prometheus", "")
            KubernetesSvc(svc_monitoring_grafana, "grafana", "")
            KubernetesSvc(svc_monitoring_prometheus_node_exporter, "prometheus-node-exporter", "")
            KubernetesPod(pod_monitoring_prometheus, "prometheus", "")
            KubernetesPod(pod_monitoring_grafana, "grafana", "")
            KubernetesPod(pod_monitoring_prometheus_node_exporter, "prometheus-node-exporter x 46", "")
        }
        
        Namespace_Boundary(ns_nginx_ingress, "nginx-ingress") {
            KubernetesSvc(svc_nginx_ingress, "nginx-ingress", "")
            KubernetesPod(pod_nginx_ingress_0, "nginx-ingress", "")
            KubernetesPod(pod_nginx_ingress_1, "nginx-ingress", "")  
        }
        
        ' Namespace_Boundary(ns_nginx_ingress_internal, "nginx-ingress-internal") {
        '     KubernetesSvc(svc_nginx_ingress_internal, "nginx-ingress-internal", "")
        '     KubernetesPod(pod_nginx_ingress_internal_0, "nginx-ingress-internal", "")
        ' }
        
        ' Namespace_Boundary(ns, "rabbitmq-system") {}

    }

    
    Rel(svc_logging_elasticsearch,pod_logging_elastic_0,"load Balances to Pods","")
    Rel(svc_logging_elasticsearch,pod_logging_elastic_1,"load Balances to Pods","")
    Rel(svc_logging_elasticsearch,pod_logging_elastic_2,"load Balances to Pods","")

    Rel(svc_logging_kibana,pod_logging_kibana,"load Balances to Pods","")
    Rel(pod_logging_fluentd,svc_logging_elasticsearch,"","")
    Rel(pod_logging_kibana,svc_logging_elasticsearch,"","")

    Rel(svc_monitoring_prometheus_node_exporter,pod_monitoring_prometheus_node_exporter,"load Balances to Pods","")

    Rel(svc_monitoring_prometheus,pod_monitoring_prometheus,"load Balances to Pods","")
    Rel(svc_monitoring_grafana,pod_monitoring_grafana,"load Balances to Pods","")

    ' Rel(svc_nginx_ingress_internal,pod_nginx_ingress_internal_0,"","")

    Rel(svc_nginx_ingress,pod_nginx_ingress_0,"load Balances to Pods","")
    Rel(svc_nginx_ingress,pod_nginx_ingress_1,"load Balances to Pods","")
    
    Rel(svc_es,pod_es,"load Balances to Pods", "")
    Rel(pod_es,backupStorageforES,"","")
    Rel(svc_pgpool,pod_pgpool_0,"load Balances to Pods", "")
    Rel(svc_pgpool,pod_pgpool_1,"load Balances to Pods", "")
    Rel(svc_pgpool,pod_pgpool_2,"load Balances to Pods", "")
    
    Rel(pod_pgpool_0,pod_postgresql_0,"write", "")
    Rel(pod_pgpool_1,pod_postgresql_0,"write", "")
    Rel(pod_pgpool_2,pod_postgresql_0,"write", "")
    
    Rel(pod_pgpool_0,pod_postgresql_1,"read", "")
    Rel(pod_pgpool_1,pod_postgresql_1,"read", "")
    Rel(pod_pgpool_2,pod_postgresql_1,"read", "")
    Rel(pod_pgpool_0,pod_postgresql_2,"read", "")
    Rel(pod_pgpool_1,pod_postgresql_2,"read", "")
    Rel(pod_pgpool_2,pod_postgresql_2,"read", "")
    
    Rel(pod_postgresql_0,backupStorageforPG,"","")
    Rel(pod_postgresql_1,backupStorageforPG,"","")
    Rel(pod_postgresql_2,backupStorageforPG,"","")
    
    Rel(svc_rabbitmq,pod_rabbitmq_0,"load Balances to Pods", "")
    Rel(svc_rabbitmq,pod_rabbitmq_1,"load Balances to Pods", "")
    Rel(svc_rabbitmq,pod_rabbitmq_2,"load Balances to Pods", "")

    Rel(svc_sentinel,pod_sentinel_0,"load Balances to Pods", "")
    Rel(svc_sentinel,pod_sentinel_1,"load Balances to Pods", "")
    Rel(svc_sentinel,pod_sentinel_2,"load Balances to Pods", "")

    Rel(pod_sentinel_0,pod_redis_0,"", "")
    Rel(pod_sentinel_0,pod_redis_1,"", "")
    
    Rel(pod_sentinel_1,pod_redis_0,"", "")
    Rel(pod_sentinel_1,pod_redis_1,"", "")
    
    Rel(pod_sentinel_2,pod_redis_0,"", "")
    Rel(pod_sentinel_2,pod_redis_1,"", "")
    
    Rel(svc_repo,pod_repo,"","")

    Rel(pod_repo,svc_es,"x 762","")
    Rel(pod_repo,svc_pgpool,"x 762","")
    Rel(pod_repo,svc_rabbitmq,"x 762","")
    Rel(pod_repo,svc_sentinel,"x 762","")
    Rel(pod_repo,contentsStorage,"","" )


    Rel(pod_nginx_ingress_0,svc_repo,"","")
    Rel(pod_nginx_ingress_1,svc_repo,"","")
    
    Rel(sysAdmin,svc_nginx_ingress,"", "")
    Rel(sysAdmin,svc_logging_kibana,"", "")
    Rel(sysAdmin,svc_monitoring_grafana,"", "")
    
    Rel(repoAdmin,svc_nginx_ingress,"", "")
    Rel(guestUser,svc_nginx_ingress,"", "")
    

@enduml